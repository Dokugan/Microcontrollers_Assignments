
states.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000012c  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091c  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085a  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e0  00000000  00000000  000013ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000428  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e2       	ldi	r30, 0x2C	; 44
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	27 d0       	rcall	.+78     	; 0x102 <main>
  b4:	39 c0       	rjmp	.+114    	; 0x128 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
}STATES;

STATES state = OFF;

void wait( int ms){
	for (int i=0; i<ms; i++)
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	0c f5       	brge	.+66     	; 0x100 <wait+0x48>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
			if (state == OFF)
			{
				state = ON;
			}
			else{
				state = OFF;
  c2:	6e ee       	ldi	r22, 0xEE	; 238
  c4:	72 e0       	ldi	r23, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	ef ec       	ldi	r30, 0xCF	; 207
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <wait+0x12>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <wait+0x18>
  d0:	00 00       	nop

void wait( int ms){
	for (int i=0; i<ms; i++)
	{
		_delay_ms(1);
		if (PINE & 0x01)
  d2:	08 9b       	sbis	0x01, 0	; 1
  d4:	10 c0       	rjmp	.+32     	; 0xf6 <wait+0x3e>
		{
			if (state == OFF)
  d6:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
  da:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
  de:	4e 3e       	cpi	r20, 0xEE	; 238
  e0:	52 40       	sbci	r21, 0x02	; 2
  e2:	29 f4       	brne	.+10     	; 0xee <wait+0x36>
			{
				state = ON;
  e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
  e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <wait+0x3e>
			}
			else{
				state = OFF;
  ee:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
  f2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
}STATES;

STATES state = OFF;

void wait( int ms){
	for (int i=0; i<ms; i++)
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	82 17       	cp	r24, r18
  fc:	93 07       	cpc	r25, r19
  fe:	19 f7       	brne	.-58     	; 0xc6 <wait+0xe>
 100:	08 95       	ret

00000102 <main>:

int main(void)
{
	int delay = 1000;
	
	DDRE = 0x00;
 102:	12 b8       	out	0x02, r1	; 2
	DDRD = 0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~BIT(7);
 108:	97 98       	cbi	0x12, 7	; 18
    while (1) 
    {		
		PORTD ^= BIT(7);
		wait(delay - state);
 10a:	c8 ee       	ldi	r28, 0xE8	; 232
 10c:	d3 e0       	ldi	r29, 0x03	; 3
	DDRE = 0x00;
	DDRD = 0xFF;
	PORTD &= ~BIT(7);
    while (1) 
    {		
		PORTD ^= BIT(7);
 10e:	82 b3       	in	r24, 0x12	; 18
 110:	80 58       	subi	r24, 0x80	; 128
 112:	82 bb       	out	0x12, r24	; 18
		wait(delay - state);
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 118:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 11c:	9e 01       	movw	r18, r28
 11e:	28 1b       	sub	r18, r24
 120:	39 0b       	sbc	r19, r25
 122:	c9 01       	movw	r24, r18
 124:	c9 df       	rcall	.-110    	; 0xb8 <wait>
 126:	f3 cf       	rjmp	.-26     	; 0x10e <main+0xc>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
